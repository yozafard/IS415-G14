[
  {
    "objectID": "datasets/scrape_mamikos.html",
    "href": "datasets/scrape_mamikos.html",
    "title": "IS415-G14",
    "section": "",
    "text": "from selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.webdriver.common.keys import Keys\nfrom selenium.common.exceptions import (\n    NoSuchElementException,\n    TimeoutException,\n    JavascriptException,\n    WebDriverException,\n    StaleElementReferenceException,\n)\nfrom fake_useragent import UserAgent\nimport requests\nfrom bs4 import BeautifulSoup\nimport logging\nimport random\nimport pandas as pd\nimport time\nfrom tqdm.notebook import tqdm\n\n\ndistricts = [\n    # \"jakarta\",\n    # \"jakarta-barat\",\n    # \"jakarta-pusat\",\n    # \"jakarta-selatan\",\n    \"jakarta-timur\",\n    # \"jakarta-utara\",\n]\n\ngenders = [\n    \"Semua\",\n    \"Khusus Putra\",\n    \"Khusus Putri\",\n    \"Putra dan Campur\",\n    \"Putri dan Campur\",\n]\n\nprice_starts = range(0, 15000000, 100000)\n\nvar = [\n    \"_id\",\n    \"price_monthly\",\n    \"latitude\",\n    \"longitude\",\n    \"gender\",\n    \"area_city_keyword\",\n    \"area_subdistrict\",\n    \"status\",\n    \"size\",\n    \"fac_room\",\n    \"fac_share\",\n    \"fac_bath\",\n    \"fac_near\",\n    \"fac_park\",\n    \"kos_rule\",\n    \"fac_price\",\n    \"owner_user_id\",\n    \"building_year\",\n    \"is_singgahsini\",\n    \"is_apik\",\n    \"is_elite\",\n    \"number_success_owner_trx\",\n    \"number_success_kos_trx\",\n]\n\n\n# Function to get a random user agent\ndef get_random_user_agent():\n    ua = UserAgent(min_version=120.0)\n    return ua.random\n\ndef get_free_proxies():\n    countries = ['SG', 'VN', 'TH', 'ID']\n    proxies = []\n    url = 'https://free-proxy-list.net/'\n    response = requests.get(url)\n    soup = BeautifulSoup(response.content, 'html.parser')\n    table = soup.find('table')\n    for row in table.tbody.find_all('tr'):\n        columns = row.find_all('td')\n        if columns[2].text in countries:\n            ip = columns[0].text\n            port = columns[1].text\n            proxies.append(f'{ip}:{port}')\n    return proxies\n\n# Function to get a random proxy\ndef get_random_proxy(proxies):\n    return proxies[random.randint(0, len(proxies) - 1)]\n\ndef setup_driver(proxies):\n    user_agent = get_random_user_agent()\n    proxy = get_random_proxy(proxies)\n    \n    chrome_options = Options()\n    chrome_options.add_argument(\"--headless=new\")\n    chrome_options.add_argument(\"--window-size=1280,720\")\n    chrome_options.add_argument(f\"user-agent={user_agent}\")\n    # chrome_options.add_argument(f\"--proxy-server=http://{proxy}\")\n    driver = webdriver.Chrome(options=chrome_options)\n    return driver, proxy\n\n\nurl = \"https://mamikos.com/booking/\"\nproxies = get_free_proxies()\nresults = []\n\n# Set up logging\nlogging.basicConfig(filename='error.log', level=logging.ERROR)\n\ntry:\n    for district in tqdm(districts):\n        for gender in tqdm(genders):\n            while True:\n                try:\n                    driver, proxy = setup_driver(proxies)\n                    driver.get(url + district)\n                    # Wait until the filter appears\n                    WebDriverWait(driver, 4).until(\n                        EC.presence_of_element_located(\n                            (By.CSS_SELECTOR, \"div[data-v-424a8076]\")\n                        )\n                    )\n                    break\n                except (WebDriverException, TimeoutException) as e:\n                    logging.error(f'Proxy Failed')\n                    driver.quit()\n                    proxies.remove(proxy)\n                    continue\n            \n            for price_start in tqdm(price_starts):                \n                try:\n                    # Fill the gender type dropdown filter\n                    filterType = driver.find_element(By.ID, \"filterType\")\n                    filterType.send_keys(gender)\n\n                    # Fill the price filter\n                    filterPriceMin = driver.find_element(By.ID, \"filterPriceMin\")\n                    filterPriceMin.send_keys(Keys.CONTROL + \"a\")\n                    filterPriceMin.send_keys(price_start)\n                    filterPriceMax = driver.find_element(By.ID, \"filterPriceMax\")\n                    filterPriceMax.send_keys(Keys.CONTROL + \"a\")\n                    filterPriceMax.send_keys(price_start + 100000)\n\n                    # Click the submit button\n                    submit = driver.find_element(\n                        By.CSS_SELECTOR, 'button[type=\"submit\"]'\n                    )\n                    submit.click()\n\n                    while True:\n                        # Iterate through the listing cards\n                        for i in range(20):\n                            # Find the listing card again to avoid stale element reference\n                            try:\n                                # Wait until the listing cards appear\n                                WebDriverWait(driver, 4).until(\n                                    EC.presence_of_element_located(\n                                        (By.CSS_SELECTOR, \"div.listing-room-card\")\n                                    )\n                                )\n                                room_card = driver.find_element(By.CSS_SELECTOR, \"div.listing-room-card\") \n                                card = room_card.find_elements(By.CSS_SELECTOR, \"div.kost-rc__inner\")[i]\n                                driver.execute_script(\"arguments[0].click();\", card)\n                            except Exception as e:\n                                if e.__class__ == StaleElementReferenceException:\n                                    logging.error(f'Line 64 - Stale Element')\n                                elif e.__class__ == IndexError:\n                                    logging.error(f'Line 66 - Index Error')\n                                elif e.__class__ == TimeoutException:\n                                    logging.error(f'Line 68 - Timeout')\n                                else:\n                                    logging.error(f'Line 70 - Other Error')\n                                break\n\n                            # Switch to the main page to avoid StaleElementReferenceException\n                            driver.switch_to.window(driver.window_handles[0])\n\n                            # Sleep to avoid too many requests\n                            time.sleep(0.95 + random.random())\n                            \n                            # Switch to the detail page\n                            driver.switch_to.window(driver.window_handles[1])\n                            \n                            # Execute the query to get the detail object\n                            detail = {}\n                            while not detail:\n                                try:\n                                    detail = driver.execute_script(\"return detail\")\n                                except JavascriptException as e:\n                                    logging.error(f'Line 91 - Too Many Requests')\n                                    time.sleep(30)\n                                    driver.refresh()\n                            \n                            # Store the selected elements\n                            detail = {key: detail[key] for key in var if key in detail}\n                            detail[\"url\"] = driver.current_url\n                            results.append(detail)\n\n                            # Close the page\n                            driver.close()\n\n                            # Switch back to the listing page\n                            driver.switch_to.window(driver.window_handles[0])\n                        \n                        try:\n                            # Find the pagination bar\n                            pagination = driver.find_element(By.CSS_SELECTOR, \"ul.pagination\")\n\n                            # Wait until the bar is loaded\n                            WebDriverWait(driver, 4).until(\n                                lambda d: pagination.find_element(By.CSS_SELECTOR, \"li.active\")\n                            )\n\n                            active_page = pagination.find_element(By.CSS_SELECTOR, \"li.active\").text\n                            second_last_page = pagination.find_element(By.CSS_SELECTOR, \"li:nth-last-child(2)\").text\n\n                            if active_page != second_last_page:\n                                next_button = pagination.find_element(By.CSS_SELECTOR, \"li:last-child a\")\n                                next_button.click()\n                            else:\n                                break\n                        except NoSuchElementException as e:\n                            logging.error(f'Line 124 - Pagination Failed')\n                        except TimeoutException as e:\n                            logging.error(f'Line 126 - Timeout')\n                            break\n                except TimeoutException as e:\n                    logging.error(f'Line 129 - Timeout')\n                    continue\n            \n            # Change to a new proxy\n            driver.quit()\nfinally:\n    driver.quit()\n    result = pd.DataFrame(results)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmamikos_raw = pd.DataFrame(results)\nmamikos = mamikos_raw.drop_duplicates(subset=[\"_id\"])\nlen(mamikos)\n\n3605\n\n\n\nmamikos.to_csv(\"mamikos_jakarta-timur.csv\", index=\"_id\")\n\n\njakarta_41_150 = pd.read_csv(\"mamikos_41-150.csv\")\njakarta = pd.read_csv(\"mamikos_jakarta.csv\")\njakarta_semua_putra_putri = pd.read_csv(\"mamikos_jakarta_semua_putra_putri.csv\")\npusat = pd.read_csv(\"mamikos_jakarta-pusat.csv\")\nbarat_semua = pd.read_csv(\"mamikos_jakarta-barat_semua.csv\")\nbarat_bukan_semua = pd.read_csv(\"mamikos_jakarta-barat_bukan-semua.csv\")\nselatan = pd.read_csv(\"mamikos_jakarta-selatan.csv\")\ntimur = pd.read_csv(\"mamikos_jakarta-timur.csv\")\nutara = pd.read_csv(\"mamikos_jakarta-utara.csv\")\n\n\nmamikos = pd.concat([jakarta_41_150, jakarta, jakarta_semua_putra_putri, pusat, barat_semua, barat_bukan_semua, selatan, timur, utara])\nmamikos = mamikos.drop_duplicates(subset=[\"_id\"]).drop(columns=[\"Unnamed: 0\"])"
  },
  {
    "objectID": "Deliverables/Meeting_Minutes.html",
    "href": "Deliverables/Meeting_Minutes.html",
    "title": "Meeting Minutes",
    "section": "",
    "text": "Considering the nature of the project, a lot of decisions need to be taken as a group. To keep track of those decisions, we are using these meeting minutes as a main point of reference for our decision making processes. However, outside of these meetings, we also have other methods of communication, such as our group chat, and email correspondences with Prof Kam"
  },
  {
    "objectID": "Deliverables/Meeting_Minutes.html#date-26-febuary-2024",
    "href": "Deliverables/Meeting_Minutes.html#date-26-febuary-2024",
    "title": "Meeting Minutes",
    "section": "Date: 26 Febuary 2024",
    "text": "Date: 26 Febuary 2024\n\nAttendees: Vincent, Emily, Yoza\n\n\nPoints:\n\nTeam formation\nStart of idea branstorming"
  },
  {
    "objectID": "Deliverables/Meeting_Minutes.html#date-04-march-2024",
    "href": "Deliverables/Meeting_Minutes.html#date-04-march-2024",
    "title": "Meeting Minutes",
    "section": "Date: 04 March 2024",
    "text": "Date: 04 March 2024\n\nAttendees: Vincent, Emily, Yoza\n\n\nPoints:\n\nTeam formation\nStart of idea branstorming: decided on house price prediction in Manila\nIndividual research and proposal writing"
  },
  {
    "objectID": "Deliverables/Meeting_Minutes.html#date-11-march-2024",
    "href": "Deliverables/Meeting_Minutes.html#date-11-march-2024",
    "title": "Meeting Minutes",
    "section": "Date: 11 March 2024",
    "text": "Date: 11 March 2024\n\nAttendees: Vincent, Emily, Yoza\n\n\nPoints:\n\nDecided to pivot over to Anytime Fitness franchising in Singapore\nStarted on proposal writing"
  },
  {
    "objectID": "Deliverables/Meeting_Minutes.html#date-13-march-2024",
    "href": "Deliverables/Meeting_Minutes.html#date-13-march-2024",
    "title": "Meeting Minutes",
    "section": "Date: 13 March 2024",
    "text": "Date: 13 March 2024\n\nAttendees: Prof Kam, Vincent, Emily, Yoza\n\n\nPoints:\n\nGained more insights on the challenges of our topic, for both Anytime Fitness and Manila house price prediction\nGained suggestion to focus more on Jakarta market, considering our backgrounds"
  },
  {
    "objectID": "Deliverables/Meeting_Minutes.html#date-16-march-2024",
    "href": "Deliverables/Meeting_Minutes.html#date-16-march-2024",
    "title": "Meeting Minutes",
    "section": "Date: 16 March 2024",
    "text": "Date: 16 March 2024\n\nAttendees: Vincent, Emily, Yoza\n\n\nPoints:\n\nResearched more on housing in Jakarta\nDecided on using data from Mamikos"
  },
  {
    "objectID": "Deliverables/Meeting_Minutes.html#date-22-march-2024",
    "href": "Deliverables/Meeting_Minutes.html#date-22-march-2024",
    "title": "Meeting Minutes",
    "section": "Date: 22 March 2024",
    "text": "Date: 22 March 2024\n\nAttendees: Vincent, Emily, Yoza\n\n\nPoints:\n\nFinalized our topic: Room Rental Unit Analysis in Jakarta, using data from Mamikos\nStarted on data collection and preprocessing"
  },
  {
    "objectID": "Deliverables/Meeting_Minutes.html#date-25-march-2024",
    "href": "Deliverables/Meeting_Minutes.html#date-25-march-2024",
    "title": "Meeting Minutes",
    "section": "Date: 25 March 2024",
    "text": "Date: 25 March 2024\n\nAttendees: Vincent, Emily, Yoza\n\n\nPoints:\n\nStarted on our respective parts for the project\nBrainstormed poster ideas"
  },
  {
    "objectID": "Deliverables/Meeting_Minutes.html#date-1-april-2024",
    "href": "Deliverables/Meeting_Minutes.html#date-1-april-2024",
    "title": "Meeting Minutes",
    "section": "Date: 1 April 2024",
    "text": "Date: 1 April 2024\n\nAttendees: Vincent, Emily, Yoza\n\n\nPoints:\n\nFinished poster\nStarted transferring over our parts to the Shiny App"
  },
  {
    "objectID": "Deliverables/Meeting_Minutes.html#date-5-april-2024",
    "href": "Deliverables/Meeting_Minutes.html#date-5-april-2024",
    "title": "Meeting Minutes",
    "section": "Date: 5 April 2024",
    "text": "Date: 5 April 2024\n\nAttendees: Vincent, Emily, Yoza\n\n\nPoints:\n\nFinished Shiny App\nPreparation for presentation"
  },
  {
    "objectID": "Deliverables/Meeting_Minutes.html#date-12-april-2024",
    "href": "Deliverables/Meeting_Minutes.html#date-12-april-2024",
    "title": "Meeting Minutes",
    "section": "Date: 12 April 2024",
    "text": "Date: 12 April 2024\n\nAttendees: Vincent, Emily, Yoza\n\n\nPoints:\n\nMade necessary adjustments based on feedbacks from our presentation\nFinishing touches before submission"
  },
  {
    "objectID": "Deliverables/Proposal.html",
    "href": "Deliverables/Proposal.html",
    "title": "Project Proposal",
    "section": "",
    "text": "This project investigates room rental price prediction in Jakarta using geospatial analysis methods to assist home owners, property agents, and potential business owners in the rental market. Through Geospatial Weighted Regression, both descriptive and predictive methods, and Kernel Density Estimation techniques, we explore the spatial dynamics and determinants of rental prices across Jakarta’s diverse neighborhoods. By analyzing publicly available datasets and employing machine learning algorithms, we uncover spatial patterns, identify high-demand areas, and segment neighborhoods based on rental price similarities. The project culminates in the development of interactive visualizations that convey insights intuitively, facilitating informed decision making and strategic planning in Jakarta’s evolving rental market."
  },
  {
    "objectID": "Deliverables/Proposal.html#data-preparation",
    "href": "Deliverables/Proposal.html#data-preparation",
    "title": "Project Proposal",
    "section": "5.1 Data Preparation",
    "text": "5.1 Data Preparation\n\n1. Data Sourcing\nOur dataset will be sourced from Mamikos, a property rental platform in Indonesia. We will be focusing only on Jakarta’s rental units, as it is the capital city and the most populous city in Indonesia. The dataset will include rental prices, room sizes, and other relevant features that influence rental prices. The data is scraped using Selenium and BeautifulSoup libraries in Python.\n\n\n2. Data Importing\nThe data importing will leverage on R libraries, such as dplyr for aspatial data, and sf for geospatial data. The data will be imported into R for further analysis and visualization.\n\n\n3. Data Wrangling\nThe imported data undergoes cleaning and preprocessing to address missing values, outliers, and inconsistencies. This stage may involve normalization, encoding categorical variables, and data transformation to ensure compatibility with analysis methods. The data will be transformed into a spatial data frame using the sf library."
  },
  {
    "objectID": "Deliverables/Proposal.html#exploratory-data-analysis",
    "href": "Deliverables/Proposal.html#exploratory-data-analysis",
    "title": "Project Proposal",
    "section": "5.2 Exploratory Data Analysis",
    "text": "5.2 Exploratory Data Analysis\n\n1. Statistical Graphs: Histogram, Box Plot\nKey distributions and relationships within the data are visualized using histograms and box plots. Histograms reveal the distribution of rental prices and other numerical variables, while box plots identify outliers and the spread of data across categorical variables.\n\n\n2. Point Pattern Analysis - Kernel Density Estimation\nKDE plots help identify the density of rental properties across the city, offering insights into high-demand areas and potential patterns of spatial clustering. Price will also be used as a weight in the calculation, to offer more insight on high price rentals"
  },
  {
    "objectID": "Deliverables/Proposal.html#descriptive-analytics",
    "href": "Deliverables/Proposal.html#descriptive-analytics",
    "title": "Project Proposal",
    "section": "5.3 Descriptive Analytics",
    "text": "5.3 Descriptive Analytics\n\n1. Multiple Linear Regression (MLR)\nMultiple Linear Regression is used to provide a global overview of how each feature affects the price of rental units in Jakarta. This model will be used to identify the most important features that affect the price of rental units in Jakarta.\n\n\n2. Geographically Weighted Regression (GWR)\nUsing Geographically Weighted Regression, we are aiming to give users an insight of how each feature affects the price of rental units in each region of Jakarta. This model will be used to identify the most important features that affect the price of rental units in each region of Jakarta."
  },
  {
    "objectID": "Deliverables/Proposal.html#predictive-analytics",
    "href": "Deliverables/Proposal.html#predictive-analytics",
    "title": "Project Proposal",
    "section": "5.4 Predictive Analytics",
    "text": "5.4 Predictive Analytics\n\n1. Multiple Linear Regression\nWe are using a standard Multiple Linear Regression to predict the price of a rental unit, based on user inputs. The user inputs would be location (taken from the address that the user inputted), the gender of the room (if it’s a mixed unit, male-only, or female-only), size of the unit in meter square, and the year that the building is built or last renovated.\n\n\n2. Geographically Weighted Random Forest\nBuilding on the Multiple Linear Regression, we wanted to improve it further by introducing location as a geospatial feature to add more weight for closer units."
  },
  {
    "objectID": "Deliverables/Proposal.html#geographically-weighted-random-forest-1",
    "href": "Deliverables/Proposal.html#geographically-weighted-random-forest-1",
    "title": "Project Proposal",
    "section": "3.3 Geographically Weighted Random Forest",
    "text": "3.3 Geographically Weighted Random Forest"
  },
  {
    "objectID": "Deliverables/Proposal.html#a-spatial-regression-model-for-predicting-prices-of-short-term-rentals-in-athens-greece",
    "href": "Deliverables/Proposal.html#a-spatial-regression-model-for-predicting-prices-of-short-term-rentals-in-athens-greece",
    "title": "Project Proposal",
    "section": "4.1 A Spatial Regression Model for Predicting Prices of Short-Term Rentals in Athens, Greece",
    "text": "4.1 A Spatial Regression Model for Predicting Prices of Short-Term Rentals in Athens, Greece\n\nObjective\nExplores the factors affecting the prices of short-term rental properties listed on Airbnb in Athens, Greece. Using spatial data analysis, the study focuses on identifying significant predictors of rental prices, including property features, host attributes, review characteristics, and various location attributes\n\n\nMethodology\n\nMultiple Regression Analysis (Ordinary Least Squares)\n\nExplains the regression of a dependent variable over more than one independent variable\n\nGeographically Weighted Regression\n\nA linear regression model which pays more attention to the local regression based on spatial relationship\n\n\nLearning points\n\nConsistent across studies is the finding that location significantly influences short-term rental prices. Proximity to tourist attractions, amenities, and transport links are pivotal in determining price points.\nThe characteristics of the property, such as the number of bedrooms and bathrooms, along with host-related factors like reviews and superhost status, play a crucial role in pricing\n\n\nAreas for improvement\nConcentrate on the rentals with high residuals and analyze the neighborhood characteristics and the amenities they offer. In addition, replacing Euclidean distances with distances along the road network might improve the results of the OLS model"
  },
  {
    "objectID": "Deliverables/Proposal.html#assessing-the-impact-of-selected-attributes-on-dwelling-prices-using-ordinary-least-squares-regression-and-geographically-weighted-regression-a-case-study-in-poznań-poland",
    "href": "Deliverables/Proposal.html#assessing-the-impact-of-selected-attributes-on-dwelling-prices-using-ordinary-least-squares-regression-and-geographically-weighted-regression-a-case-study-in-poznań-poland",
    "title": "Project Proposal",
    "section": "4.2 Assessing the Impact of Selected Attributes on Dwelling Prices Using Ordinary Least Squares Regression and Geographically Weighted Regression: A Case Study in Poznań, Poland",
    "text": "4.2 Assessing the Impact of Selected Attributes on Dwelling Prices Using Ordinary Least Squares Regression and Geographically Weighted Regression: A Case Study in Poznań, Poland\n\nObjective\nDetermine what factors affect transaction prices in Poznan, Poland.\n\n\nMethodology\n\nOrdinary Least Squares\n\nMay be biassed as the OLS method does not take into account spatial autocorrelation.\n\nMoran’ I Test\n\nCheck if there are any spatial autocorrelation\n\nGeographically Weighted Regression\n\nAllows the estimation of local coefficients based on samples within the bandwidth of a local location, which can solve the problem of spatial autocorrelation\n\n\nLearning points\nOLS only explains around 23% of the variability of the observed phenomenon\nAfter conducting Moran’ I Test, the property prices seem to be spatially clustered and there is a positive spatial autocorrelation.\nGWR returned an R Squared value of 0.477 and AIC of 15597.432. This indicates that GWR Performed better compared to the OLS method.\n\n\nAreas for improvement\nGathering more precise data\nUsage of other methods\nFeature engineering - the variables selected are based on information from local real estate offices, which might overlook other important variables"
  },
  {
    "objectID": "Deliverables/Proposal.html#use-of-geographically-weighted-regression-gwr-method-to-estimate-the-effects-of-location-attributes-on-the-residential-property-values",
    "href": "Deliverables/Proposal.html#use-of-geographically-weighted-regression-gwr-method-to-estimate-the-effects-of-location-attributes-on-the-residential-property-values",
    "title": "Project Proposal",
    "section": "4.3 Use of Geographically Weighted Regression (GWR) Method to Estimate the Effects of Location Attributes on the Residential Property Values",
    "text": "4.3 Use of Geographically Weighted Regression (GWR) Method to Estimate the Effects of Location Attributes on the Residential Property Values\n\nObjective\nEstimate the effect of locational attributes on property values in Kuala Lumpur\n\n\nMethodology\n\nHedonic Pricing Model (HPM)\n\nA standard prediction model that does not take into account characteristics such as spatial autocorrelation and spatial heterogeneity\n\nGeographically Weighted Regression (GWR)\nBuilt on top of the HPM to prevents issues with spatial characteristics in the data\n\n\n\nLearning points\n\nThis shows that while a traditional HPM can explain 73% of the variances,  adding the spatial data can improve the accuracy.\nThe study shows that different locational attributes\nhave differential spatial effects on residential property\npremiums across the study area.\n\n\nAreas for improvement\nInterpretation on the GWR Results - we can use qualitative methods, such as focus groups on the affected areas, to get a better interpretation of the GWR results"
  },
  {
    "objectID": "Deliverables/Proposal.html#modelling-housing-rents-using-spatial-autoregressive-geographically-weighted-regression-a-case-study-in-cracow-poland",
    "href": "Deliverables/Proposal.html#modelling-housing-rents-using-spatial-autoregressive-geographically-weighted-regression-a-case-study-in-cracow-poland",
    "title": "Project Proposal",
    "section": "4.4 Modelling Housing Rents Using Spatial Autoregressive Geographically Weighted Regression: A Case Study in Cracow, Poland",
    "text": "4.4 Modelling Housing Rents Using Spatial Autoregressive Geographically Weighted Regression: A Case Study in Cracow, Poland\n\nObjective\nIdentify the determinants of rental prices in Cracow, Poland\n\n\nMethodology\n\nOrdinary Least Squares Regression\n\nInsufficient as the model does not take into account spatial relationships\n\nSpatial Autoregressive Model (SAR)\n\nIncludes a spatially lagged dependent variable to capture the influence of rental prices in nearby locations\n\nMixed Geographically Weighted Regression - Spatial Autoregressive Model (MGWR-SAR)\n\nCombined GWR with SAR\n\n\nLearning points\nGWR-SAR performed the best, as it can take in both both spatial non-stationarity of the parameters of determinants and change over space of the spatial autoregressive parameter\n\n\nAreas for improvement\nExploring the thresholds of when and where spatial correlation and spatial heterogeneity becomes a significant factor in the analysis\nAdapting the models to different spatial complexity, making it more portable and usable in different locations"
  },
  {
    "objectID": "Deliverables/Proposal.html#exploratory-data-analysis-1",
    "href": "Deliverables/Proposal.html#exploratory-data-analysis-1",
    "title": "Project Proposal",
    "section": "5.1 Exploratory Data Analysis",
    "text": "5.1 Exploratory Data Analysis\n\nHistogram to show distribution of different variables\nCorrelation plot of the variables Browse through the dataset with a table\nKernel Density Map of the different cities in Jakarta Adjustable bandwidth (in kilometres) and kernel method"
  },
  {
    "objectID": "Deliverables/Proposal.html#descriptive-analysis",
    "href": "Deliverables/Proposal.html#descriptive-analysis",
    "title": "Project Proposal",
    "section": "5.2 Descriptive Analysis",
    "text": "5.2 Descriptive Analysis\n\nShow insights on local importance of features that explains the price of the rental units\nUsers can adjust the configuration of both the GWR and MLR models to perform a descriptive analysis of the value of rental units in Jakarta"
  },
  {
    "objectID": "Deliverables/Proposal.html#predictive-analysis",
    "href": "Deliverables/Proposal.html#predictive-analysis",
    "title": "Project Proposal",
    "section": "5.3 Predictive Analysis",
    "text": "5.3 Predictive Analysis\n\nPredicts the price of the rental units based on the user input according to the chosen model (GWRF or MLR)\nDisplays the performance of each model in terms of the predictions of the rental unit prices"
  },
  {
    "objectID": "Deliverables/User_Guide.html",
    "href": "Deliverables/User_Guide.html",
    "title": "User Guide",
    "section": "",
    "text": "Welcome to the user guide! Here, we will be showing you how to use our Shiny App"
  },
  {
    "objectID": "Deliverables/User_Guide.html#kernel-density-estimation",
    "href": "Deliverables/User_Guide.html#kernel-density-estimation",
    "title": "User Guide",
    "section": "Kernel Density Estimation",
    "text": "Kernel Density Estimation\n\nThe KDE Plot here will show the distribution of rental units, with price as additional weight, meaning that rental units with higher prices will have an additional weight on the plot.\nYou can choose which city you want to view through this drop down button. “Select All” means you will be viewing the entire Jakarta.\n\nThis slider will be used to select the bandwidth. The default value is 0.5 kilometres.\n\nAnd the last dropdown button will be used to select the kernel method"
  },
  {
    "objectID": "Deliverables/User_Guide.html#variable-distribution",
    "href": "Deliverables/User_Guide.html#variable-distribution",
    "title": "User Guide",
    "section": "Variable Distribution",
    "text": "Variable Distribution\nThis tab will show the distribution of different variables in our dataset\n To change which variable you want to see, you can use the dropdown on the left"
  },
  {
    "objectID": "Deliverables/User_Guide.html#correlation-plot",
    "href": "Deliverables/User_Guide.html#correlation-plot",
    "title": "User Guide",
    "section": "Correlation Plot",
    "text": "Correlation Plot\nThe Correlation Plot will show which variables are highly correlated with each other."
  },
  {
    "objectID": "Deliverables/User_Guide.html#data-table",
    "href": "Deliverables/User_Guide.html#data-table",
    "title": "User Guide",
    "section": "Data Table",
    "text": "Data Table\nIn this tab, you can use the Data Table to view the entire dataset\n\nUse this dropdown to change how many rows to display in one page"
  },
  {
    "objectID": "Deliverables/User_Guide.html#geographically-weighted-regression",
    "href": "Deliverables/User_Guide.html#geographically-weighted-regression",
    "title": "User Guide",
    "section": "Geographically Weighted Regression",
    "text": "Geographically Weighted Regression\n\nIn this tab, you can see the average values of the coefficient of chosen variables per desa (villages) in Jakarta.\n\nYou can choose which variable you want to see the coefficient of using the dropdown on the left\nYou can choose which variable you want to plot using the dropdown on the left side. There are many other drowdowns as well that you can use to customize the configuration of the GWR model, and see how different configuration affect the coefficient of the chosen variable."
  },
  {
    "objectID": "Deliverables/User_Guide.html#multiple-linear-regression",
    "href": "Deliverables/User_Guide.html#multiple-linear-regression",
    "title": "User Guide",
    "section": "Multiple Linear Regression",
    "text": "Multiple Linear Regression\n\nIn this tab, you can see the summary of the multiple linear regression model. The plot will show you the average value of the coefficient of the chosen variable.\n\nSimilar to the GWR tab, you can choose which variable you want to see the coefficient of using the dropdown on the left. However, since MLR is a global model, you can’t see the coefficient of the variable per desa. You can choose to see the average fitted values, actual values, and the residuals per desa."
  },
  {
    "objectID": "Deliverables/User_Guide.html#predicting-price",
    "href": "Deliverables/User_Guide.html#predicting-price",
    "title": "User Guide",
    "section": "Predicting Price",
    "text": "Predicting Price\n Users can see the prediction of the monthly rental price of a room in Jakarta. The prediction is based on the input of the user, which includes the type of predictive model that the user wants to use, the address of the rental unit, the gender allowed to stay in the room, the size of the room, and the building year.\n\nThe user can choose between two predictive models, namely Geographically Weighted Random Forest (GWRF) and Multiple Linear Regression (MLR).\n\nThe address must be within DKI Jakarta and searchable in OpenStreetMap (OSM) as our data is only within Jakarta and we use the OSM API to geocode. Once the user has inputted all the data, the user can click the “Predict” button to see the predicted price of the rental unit.\n The location of the rental unit will also be shown in the map and the predicted price will be shown below the map."
  },
  {
    "objectID": "Deliverables/User_Guide.html#model-performance",
    "href": "Deliverables/User_Guide.html#model-performance",
    "title": "User Guide",
    "section": "Model Performance",
    "text": "Model Performance\n This page will show the selected model performance. The graph that is shown in based on our test dataset. We did an 80-20 train-test split for the MLR model and a 60-40 train-test split for the GWRF. This difference in the split for each model is because of the time taken for the models to train. The user can also see the Mean Absolute Percentage Error (MAPE) of the model below the graph."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "GeoMommy",
    "section": "",
    "text": "Welcome to GeoMommy Project page\nWe are a group of 3, working on to make a room rental unit analysis in Jakarta. So, wait for more updates by visiting this page. Thank you!\n\nAbstract\nThis project investigates room rental price prediction in Jakarta using geospatial analysis methods to assist home owners, property agents, and potential business owners in the rental market. Through Geospatial Weighted Regression, both descriptive and predictive methods, and Kernel Density Estimation techniques, we explore the spatial dynamics and determinants of rental prices across Jakarta’s diverse neighborhoods. By analyzing publicly available datasets and employing machine learning algorithms, we uncover spatial patterns, identify high-demand areas, and segment neighborhoods based on rental price similarities. The project culminates in the development of interactive visualizations that convey insights intuitively, facilitating informed decision making and strategic planning in Jakarta’s evolving rental market.\n\n\nImportant Links\n\nProject Proposal\nProject Poster\nShiny App"
  }
]